import sys
import re
import os

def split_on_empty_lines(s):
    blank_line_regex = r"(?:\r?\n){2,}"
    return re.split(blank_line_regex, s.strip())

def split_list(a_list):
    half = len(a_list)//2
    return a_list[:half], a_list[half:]

# Return true if the command crashes
def call(opts, cmd):
    if len(opts) == 0:
        return False
    open("/tmp/scratch.inc", 'w+').write('\n'.join(opts))
    print("HERE: ", cmd + " /tmp/scratch.inc")
    return os.system(cmd + " /tmp/scratch.inc > /dev/null") != 0
    
# Find a small range of optimizations which causes cmd to crash 
def bsearch(opts, cmd): 
    if len(opts) == 1:
        return opts
    elif len(opts) == 0:
        return ()
    else:
        left, right = split_list(opts)
        if call(left, cmd) == True:
            return bsearch(left, cmd)
        elif call(right, cmd) == True:
            return bsearch(right, cmd)
        else:
            print("Rangefinder failed, find combinations")
            return opts

def main():
    # First argument is the autogenerated matcher file
    # Second argument is a file with the command to run whatever you want to run with the matchers as input
    all = split_on_empty_lines(open(sys.argv[1]).read())
    cmd = sys.argv[2]
    print('\n'.join(bsearch(all, cmd)))
    return 0

if __name__ == "__main__":
    main()